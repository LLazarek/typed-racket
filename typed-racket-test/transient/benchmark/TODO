- [X] fsmoo/mbta/quadU/take5, object/sc and class/sc unsupported
- [X] synth, threadcell contract
- [X] acquire, cannot generate contract 2 cases of arity 1
- [X] acquire/dungeon/forth/zombie, sc->tag expected sc got void
- [X] sc->tag/c why return a static contract and not a contract? (issue with recursion?)
      yeah it's gotta be an sc because we're not ready to instantiate yet
- [X] fsm, expected (StructTypeTop ....) failed
- [X] plot build fails (see in-cycle.rkt test)
      opened issue in TR (), hacked-around for LD for now
      EDIT closed the TR issue, hack validated
- [X] make-typed-renaming needs 3 args but sometimes gets 2 ... how? (in-array.rkt)
- [X] fsm fsmoo --- need to check `type->flat-contract` returns #f
      application: not a procedure; expected a procedure that can be applied to arguments given: #f arguments...: 0
- [X] jpeg, can't use for/array because untype-contract restricts Transient
      uses, but not typed ones
- [X] quadU errors in untyped and typed, by cadr
      error changed after revert x4:
        sc->tag/c: not implemented for (cons/sc (flat/sc symbol?) (cons/sc (listof/sc (cons/sc (flat/sc symbol?) #0=any/sc)) (listof/sc #0#)))
      error not fixed by removing rts provides
      fixed again by not defining predicates in LD code
- [X] fsmoo (population) quadU (utils) quadT (core-types) forth (command) slow to compile
      even typed maybe
      - fsmoo seems much better 2020-02-14 ... forth BAD
      - 2020-02-17 : forth and quadU were looping in contract generation,
        because of name/sc lookups (recursively converting everything in
        name-table to tags?)
        quadT also needed to move the `quad` macro to a new file, so LD code
         doesn't need to use a typed macro
- [X] simplify tag-reduce for no fuel? (does that help much?)
      2020-02-18 ok now, no depth argument, all decided by LD parameter
- [X] fixup name-table code? make a tag-table on the side?
      yeah if we make tags from the start, no need! the table contains tags and doesn't need to be cut later
- [X] can we have type->contract unit & avoid building full sc's ahead of time?
      lets try 3 functions for the first
      ... at least T vs S and we will see if there are code savings
      LOOKS GOOD
- [X] remove sc->tag
- [X] check diff, anything else to remove?
- [X] remove contract-first-order for classes .... when?
      maybe should wait, until we can measure the difference of building or not ... no thats silly just make it easy to go back
      HALF-way removed, it's there but lifted to toplevel; could not check
       field + method membership otherwise (need to use class internals)
- [X] jpeg, jfif.rkt component? use-before-def error
      dammit, struct contract
      cannot do contract = foo?
      need contract = (lambda (x) (foo? x))
      because foo? might not be defined yet, and these are lifted to the toplevel
- [X] lnm missing type for plot-pict
      its a define-typed/untyped-id ... need require/typed on the client side
- [X] runtime perf: sieve
- [X] 'typed-world ? it's a blame label for `cast` ... we could rename depending
      on the mode for the current types, but I don't think it matters
- [X] remove `typed ? at least clearly distinguish a mode from a side
- [X] remove current-typed-side ?
- [X] what goes wrong in type->contract doesn't set parameter?
      nothing yet, so change to an assert for now
- [X] bless string->path
- [X] can transient macro appear in untyped?
  well the macro code CANNOT be type checked and IS NOT defended
  ... unclear what defense to add to (f x) --> (car (car x))
  ... if unoptimized then could be fine right?
  ... yeah I think this is fine, ESCAPE is a problem,
      but not really right now because all functions are defended no worries about escape
  OK allowed now
- [X] bless check-list
  ... and anything that returns void? NO contexts can distinguish void (void? X) (if X ....)
- [X] ??? variable-reference-constant? #%variable-reference --- probably TR internal
      yeah looks like TR internals
- [X] register-type, look over
- [X] ... anything returns Nothing (none/c/proc) ... well doesn't change error, but generates a lot of code
- [X] ??? make-sequence
         (let-values (((pos->vals pos-pre-inc pos-next init pos-cont?  val-cont?  all-cont?)
                       (let-values (((dyn-cod22 dyn-cod23 dyn-cod24 dyn-cod25 dyn-cod26 dyn-cod27 dyn-cod28)
                                     (#%app make-sequence '(word+freq) words+freqs)))
                         (if (if (#%plain-app g11 dyn-cod22) (if (#%plain-app g14 dyn-cod23) (if (#%plain-app g11 dyn-cod24) (if (#%plain-app g14 dyn-cod26) (if (#%plain-app g14 dyn-cod27) (#%plain-app g21 dyn-cod28)
                                       '#f) '#f) '#f) '#f) '#f)
                           (#%app values dyn-cod22 dyn-cod23 dyn-cod24 dyn-cod25 dyn-cod26 dyn-cod27 dyn-cod28)
                           (#%plain-app error 'dynamic-typecheck '"'(#%app make-sequ... : ((-> Any (List String Integer)) (U (-> Any Any) False) (-> Any Any) Any (U (-> Any Any) False) (U (-> (List String Integer) Any) False) (U (-> Any (List String Integer) Any) False))")))))
  2020-03-03 pretty sure fixed by changing the base environment

- [ ] ??? for/list etc, its always a list or void or sum
  (2020-02-28 still a problem, (check (#%app for-loop  ....)))

- [ ] for-loop lambda ... all these ifs might be killing loops idk
  2020-03-03 saves ~1/2 second in morsecode

- [ ] define-predicate really flat?
- [ ] suffixtree 4s typed 40s tagged???
      that's not too far off from ICFP after all ... 10s slower
- [ ] fill = lambda ... escape analysis?
      ditto for loops (again they can escape)
- [ ] can vec? check be simpler, instead of union ivec mvec?
      ditto for hash

- [ ] morsecode/sieve/snake/tetris, very slow runtime (require-typed-check bug?)
      ... better now after checking "blessed" but heres now fully-typed vs ICPF worst-case
      morsecode : 4.45 vs 3.48
      sieve : 2.84 vs 1.69
      snake : 11.3 vs 6.7
      tetris : 1.2 vs 8.8
      zombie : 24x vs 20x
      ICFP should always be slower, but its not ... WTF snake & tetris!!!!!

- [ ] tc-app-lambda todo items (PR to TR?)
- [ ] investigate contract generation, where do names go what gets reused?
- [ ] optimizer
  leave S,E macros un-optimized (should be no problem ... but lets see)
  yes they are skipped optimizer/optimizer L67

- [ ] unhygienic S require T identifier
      use contract-def/provide-property ?

- [ ] does extra-env lang need changes for transient?
  - [ ] rackunit env broke

- [ ] transient breaks tail calls? or does typed-id? check make it okay?
- [ ] low priority: change extra-env-lang to accept transient blessing,
      plot-lib is the only user I know of
- [ ] bless require/typed struct predicates
